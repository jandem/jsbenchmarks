<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head profile="http://gmpg.org/xfn/11">
<!-- Futuremark Peacekeeper -->
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Peacekeeper</title>

<script type="text/javascript" src="testrunner.js"></script>
<script type="text/javascript">
var community01Encrypt = {
	
	run: function(time) {

        var email = 'test.user@futuremark.com';
		
		// Calculate hash.
		for (var i = 0; i < 100; i++) {
			var hash = this.SHA1(email);
		}
				
	},

	SHA1: function(msg) {

	    var blockstart;
	    var i, j;
	    var W = new Array(80);
	    var H0 = 0x67452301;
	    var H1 = 0xEFCDAB89;
	    var H2 = 0x98BADCFE;
	    var H3 = 0x10325476;
	    var H4 = 0xC3D2E1F0;
	    var A, B, C, D, E;
	    var temp;
	
	    msg = this.utf8Encode(msg);
	
	    var msgLen = msg.length;
	
	    var wordArray = new Array();
	    for (i = 0; i < msgLen - 3; i += 4) {
	        j = msg.charCodeAt(i) << 24 
	        	| msg.charCodeAt(i+1) << 16 
	        	| msg.charCodeAt(i+2)<<8 
	        	| msg.charCodeAt(i+3);
	        wordArray.push( j );
	    }
	
	    switch (msgLen % 4) {
	        case 0:
	            i = 0x080000000;
	        break;
	        case 1:
	            i = msg.charCodeAt(msgLen - 1) << 24 | 0x0800000;
	        break;
	
	        case 2:
	            i = msg.charCodeAt(msgLen - 2) << 24 | msg.charCodeAt(msgLen - 1) << 16 | 0x08000;
	        break;
	
	        case 3:
	            i = msg.charCodeAt(msgLen - 3) << 24 
	            	| msg.charCodeAt(msgLen-2) << 16 
	            	| msg.charCodeAt(msgLen - 1) << 8 
	            	| 0x80;
	        break;
	    }
	
	    wordArray.push( i );
	
	    while ((wordArray.length % 16) != 14 ) wordArray.push(0);
	
	    wordArray.push(msgLen >>> 29);
	    wordArray.push((msgLen << 3) &0x0ffffffff );
	
	    for (blockstart = 0; blockstart < wordArray.length; blockstart += 16 ) {
	
	        for (i = 0; i < 16; i++) W[i] = wordArray[blockstart + i];
	        for (i = 16; i <= 79; i++) W[i] = this.rotateLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
	
	        A = H0;
	        B = H1;
	        C = H2;
	        D = H3;
	        E = H4;
	
	        for( i = 0; i <= 19; i++ ) {
	            temp = (this.rotateLeft(A,5) + ((B&C) | (~B&D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = this.rotateLeft(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        for( i = 20; i <= 39; i++ ) {
	            temp = (this.rotateLeft(A,5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = this.rotateLeft(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        for( i = 40; i <= 59; i++ ) {
	            temp = (this.rotateLeft(A,5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = this.rotateLeft(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        for( i = 60; i <= 79; i++ ) {
	            temp = (this.rotateLeft(A,5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = this.rotateLeft(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        H0 = (H0 + A) & 0x0ffffffff;
	        H1 = (H1 + B) & 0x0ffffffff;
	        H2 = (H2 + C) & 0x0ffffffff;
	        H3 = (H3 + D) & 0x0ffffffff;
	        H4 = (H4 + E) & 0x0ffffffff;
	
	    }
	
	    var temp = this.cvtHex(H0) + this.cvtHex(H1) + this.cvtHex(H2) + this.cvtHex(H3) + this.cvtHex(H4);
	
	    return temp.toLowerCase();
	
	},	

    rotateLeft: function(n, s) {
        var t4 = ( n << s ) | (n >>> (32 - s));
        return t4;
    },

    lsbHex: function(val) {
        var str = "";
        var i;
        var vh;
        var vl;

        for( i=0; i<=6; i+=2 ) {
            vh = (val>>>(i*4+4))&0x0f;
            vl = (val>>>(i*4))&0x0f;
            str += vh.toString(16) + vl.toString(16);
        }
        return str;
    },

    cvtHex: function(val) {
        var str="";
        var i;
        var v;

        for( i=7; i>=0; i-- ) {
            v = (val>>>(i*4))&0x0f;
            str += v.toString(16);
        }
        return str;
    },


    utf8Encode: function(string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    }	
	
}

var count = 0;
var COUNT_MAX = 500;

function runTest() {
    //startTimer();
    for (count = 0; count < COUNT_MAX; count++) {
        community01Encrypt.run(count);
    }
    //var time = elapsedTime();
    //document.getElementById('result').innerHTML += time + 'ms<br />';
}

var startTime;
function startTimer() {
    var d = new Date();
    startTime = d.getTime();
}

/**
 * Return elapsed time.
 */
function elapsedTime() {
    var d = new Date();
    var endTime = d.getTime();
    return endTime - startTime;
}
window.onload = loadHandler;
</script>

</head>
<body>
    <div>
        FPS: <span id="result">Processing...<br /></span>
    </div>

</body>
</html>
