<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>AStar Benchmark</title>

<!-- https://bugzilla.mozilla.org/show_bug.cgi?id=536564 -->
<!-- http://jsastar.tapirpirates.net/dfdemo/JSAStarBenchmark.html -->

<script src="../testrunner.js" type="text/javascript"></script>
<script src="jquery-1.3.2.js"               type="text/javascript"></script>

<!-- priority queues -->
<script src="queues/qBenchmark.js"                 type="text/javascript"></script>
<script src="queues/NaivePriorityQueue.js"         type="text/javascript"></script>
<script src="queues/NaiveIndexedArrayPriorityQueue.js"        type="text/javascript"></script>
<!-- <script src="queues/ImpNaivePriorityQueue.js"      type="text/javascript"></script>
<script src="queues/SortedArrayPriorityQueue.js"   type="text/javascript"></script> -->

<script src="benchmap_20x20.js"             type="text/javascript"></script>
<script src="benchmap_200x200.js"           type="text/javascript"></script>
<script src="benchmap_100x100.js"           type="text/javascript"></script>
<script src="miscDemoStuff.js"              type="text/javascript"></script>
<script src="JSAStar.js"                    type="text/javascript"></script>
<script src="testFunctions.js"              type="text/javascript"></script>

<script type="text/javascript">

$(document).ready(function () {

    function generateRandomMap() {
        var matrix = generateRandomMatrix(50, 50);
        matrix = blurMatrix(matrix);
        matrix = stretchMatrix(matrix, 2, 0.1);
        matrix = matrixAddBorder(matrix);
        return matrix;
    }

    // var benchmap = generateRandomMap();

    function getTime() {
        return (new Date()).getTime();
    }
    
    // finds the path as fast as possible
    function runBenchmark(canvas, matrix, queue, funcs, hadj, maxIterations) {
        var 
            startNode = new Point.Point(1, 1, null, 0),
            endNode   = new Point.Point(matrix[0].length-2, matrix.length-2, null, 0);
            
        // setting up the pathfinder
        var p = new JSAStar(
            startNode, 
            endNode,

            queue,

            // creates the heuristic. the paramter is for adjusting the estimation (over- or underestimate),
            // making it possible to optimize for either speed or accuracy 
            // (higher is better performance, lower is better speed)
            funcs.createHeuristicFunction(hadj),

            // those functions operate on the searchspace
            funcs.createMovementCostFunction(matrix),
            funcs.createGetNeighborsFunction(matrix),

            // those functions operate directly on the node
            funcs.Point.op.compareRank,
            funcs.Point.op.getCost,
            funcs.Point.op.setCost,
            funcs.Point.op.getRank,
            funcs.Point.op.setRank,
            funcs.Point.op.samePosition
        );    
    
        var 
            tStart      = getTime(),
            iterations  = 0;


        // first, draw the matrix 
        drawMatrix(canvas, matrix);

        // iterate until a path is found
        // this is the important part!
        var x = null;

        try {

            do {
                if (p.iterationCount > maxIterations)
                    throw "Too many iterations";

                // iterate!
                x = p.iterate();
            } while (!x);
            
            var tFinish = getTime();

            // recover the path
            var path = Point.getPathAsArray(x);


            consoleMsg('found path');
            consoleMsg('nodes:      ' + path.length);
            consoleMsg('hadj:       ' + hadj);
            consoleMsg('cost:       ' + x.cost);
            consoleMsg('rank:       ' + x.rank);

        } catch (e) {
            // no path found, because there is none
            var tFinish = getTime();
            consoleMsg(e);
            // rethrow
            throw e;
        }

        // draw the final path, even if it's not complete
        drawPath(canvas, x, 'rgba(255, 0, 0, 0.7)');

        // draw the examined areas
        drawNodeArray(canvas, p.qClosed.getNodeArray(), 'rgba(0, 255, 0, 0.5)');
        drawNodeArray(canvas, p.qOpen.getNodeArray(),   'rgba(0, 255, 255, 0.5)');

        reportTestResult(tFinish-tStart);

        // benchmark output
        consoleMsg('iterations:      ' + p.iterationCount);
        consoleMsg('time:            ' + (tFinish-tStart) + 'ms');
        consoleMsg('time efficiency: ' + (tFinish-tStart)/path.length + 'ms');
        // consoleMsg('\nqOpen   Benchmark:\n' + p.qOpen.benchmark);
        // consoleMsg('\nqClosed Benchmark:\n' + p.qClosed.benchmark);
        consoleMsg('');
    }
    
    // UI controls
    $('#btnRun').click(function btnRunClick() {
        // use the provided benchmap
        runBenchmark(
            document.getElementById('canvas'),                    // where to draw the result
            getSelectedMap(),                // the matrix we're operating on
            getQueue($('#useQueue option[selected]:first').attr('value')),
            testFunctions,                  // the functions used to operate on the matrix and nodes
            parseFloat($('#hadj').val()),   // the heuristic adjustment, higher is faster but less accurate.
            10000                           // maximum recursions, otherwise it throws an exception
        );

        // make window blink
        //alert('Finished');
    });

    $('#btnExportMap').click(function () {
        var map = getSelectedMap();
        if ($('#mapexport').length == 0)
            $('body').append('<p>Export:<br/><textarea id="mapexport" cols="80" rows="10"></textarea></p>');

        $('#mapexport').val(function () {
            return 'var benchmap = [' + map.map(function (row) {return '[' + row.map( function (val) {return Math.floor(val*100)/100;}).join(',') + ']'; } ).join(',\n') + '];';
        }());
    });

    $('#useMap').change(function () {
        setUpMapAndCanvas(getSelectedMap());
    });

    function setUpMapAndCanvas(map) {

        var mWidth  = map.length,
            mHeight = map[0].length;

        Point.setSize(mWidth, mHeight);

        // prepare the canvas
        var canvas = document.getElementById('canvas');
        $(canvas).attr('width',  mWidth);
        $(canvas).attr('height', mHeight);
        $(canvas).css('width',  mWidth + 'px');
        $(canvas).css('height', mHeight + 'px');

        // draw the matrix 
        drawMatrix(canvas, map);
    }

    function getQueue(queueName) {
        var name = queueName;
        var func = window[name];

        if (typeof func == 'function') {
            return func;
        } else {
            throw "Queue doesn't exist";
        }
    }

    function getSelectedMap() {
        var mapName = $('#useMap option[selected]:first').attr('value');
        return window[mapName];
    }

    setUpMapAndCanvas(getSelectedMap());
    loadHandler();
});
function runTest() {
    document.getElementById("btnRun").click();
}
</script>

</head>
<body>
<h1>JSA* Benchmark</h1>
    <fieldset>
        <legend>Benchmark</legend>
        <p><canvas id="canvas" width="0" height="0" style="border: 1px solid #FF00FF;"></canvas></p>
        <p><input id="btnRun"  type="button" value="run"></p>
        <p><input id="btnExportMap"  type="button" value="export map"></p>
    </fieldset>

    <fieldset>
        <legend>Settings</legend>

        <p>Test Map:<br/>
            <select id="useMap">
                <option value="benchmap_20x20">preset 20x20</option>
                <option value="benchmap_100x100">preset 100x100</option>
                <option value="benchmap_200x200" selected>preset 200x200</option>
                <!-- <option value="random">random</option> -->
            </select>
        </p>

        <p>Heuristic adjustment:<br/>
        higher values will increase performance but lower accuracy. setting this to 0 turns the algorithm into dijkstras. very high values turn it into BFS.<br/>
        <input id="hadj" type="text" value="1"></p>
        <p>Queue implementation:<br/>
            <select id="useQueue">
                <option value="NaivePriorityQueue">1. Unsorted Array (slow)</option>
                <option value="NaiveIndexedArrayPriorityQueue" selected>2. Unsorted Array with an additional index</option>
            </select><br/>
            An unsorted array with an additional indexed (2) is somewhat faster than (1), but needs more memory and works only with certain map layouts.
        </p>
    </fieldset>

    <p><a href=".">index</a></p>
</body>
</html>
